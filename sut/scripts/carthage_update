#!/bin/bash
# This script is run when you want to update third party dependencies through Carthage


rm -rf ~/Library/Caches/org.carthage.CarthageKit

if [ -z "$SRCROOT" ]
then
    export SRCROOT=`pwd`
fi

if [ -z "$CACHEROOT" ]
then
	export CACHEROOT="$SRCROOT/Carthage Cache"
fi

export CARTHAGE="$SRCROOT/Carthage"
rm -rf "$CARTHAGE"

set -euo pipefail

xcconfig=$(mktemp /tmp/static.xcconfig.XXXXXX)
trap 'rm -f "$xcconfig"' INT TERM HUP EXIT

# For Xcode 12 make sure EXCLUDED_ARCHS is set to arm architectures otherwise
# the build will fail on lipo due to duplicate architectures.
# Xcode 12 GM (12A7208)
echo 'EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200__BUILD_12A7208 = arm64 arm64e armv7 armv7s armv6 armv8' >> $xcconfig
# Xcode 12 GM (12A7209)
echo 'EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200__BUILD_12A7209 = arm64 arm64e armv7 armv7s armv6 armv8' >> $xcconfig

echo 'EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200 = $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200__BUILD_$(XCODE_PRODUCT_BUILD_VERSION))' >> $xcconfig
echo 'EXCLUDED_ARCHS = $(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT)__XCODE_$(XCODE_VERSION_MAJOR))' >> $xcconfig

export XCODE_XCCONFIG_FILE="$xcconfig"

carthage update --platform iOS --cache-builds "$@"
if [ $? -ne 0 ]; then
	exit $?
fi
export CARTHAGE_SHA=`$SRCROOT/scripts/carthage_sha`
echo "CARTHAGE_SHA is $CARTHAGE_SHA"
echo $CARTHAGE_SHA > "$SRCROOT/Cartfile.hash"
export CARTHAGE_CACHE="$CACHEROOT/$CARTHAGE_SHA"
echo "CARTHAGE_CACHE is $CARTHAGE_CACHE"
mv "$SRCROOT/Cartfile.hash" "$CARTHAGE/Cartfile.hash"
if [ -d "$CARTHAGE" ] && [ ! -d "$CARTHAGE_CACHE" ]
then
	mkdir -p "$CACHEROOT/"
	cp -R "$CARTHAGE" "$CARTHAGE_CACHE"
fi